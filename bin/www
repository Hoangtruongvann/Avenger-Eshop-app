#!/usr/bin/env node

/**
 * Module dependencies.
 */


var http = require('http');

require('dotenv').config();

const { sequelize } = require('../models');
sequelize.authenticate().then(() => {
        console.log('Connection has been established successfully.');
        const app = require('../app');
        const debug = require('debug')('web-app-development-project:server');

        /**
         * Get port from environment and store in Express.
         */

        const port = normalizePort(process.env.port || '3000');
        app.set('port', port);

        /**
         * Create HTTP server.
         */

        const server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

        /**
         * Event listener for HTTP server "listening" event.
         */

        function onListening() {
            const addr = server.address();
            const bind = typeof addr === 'string' ?
                'pipe ' + addr :
                'port ' + addr.port;
            debug('Listening on ' + bind);
        }


    })
    .catch(err => {
        console.error('Unable to connect to the database:', err);
    });



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// db
// var sequelize = require('../config/db')
// const { Sequelize } = require('sequelize');
// const sequelize = new Sequelize('Local instance MySQL80', 'root', '662255', {
//   host: 'localhost',
//   dialect: 'mysql'
// });
// async function connect(){
//   try {
//     await sequelize.authenticate();
//     console.log('Connection has been established successfully.');
//   } catch (error) {
//     console.error('Unable to connect to the database:', error);
//   }
// }
// connect();
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}